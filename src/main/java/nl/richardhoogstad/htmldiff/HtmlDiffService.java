/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package nl.richardhoogstad.htmldiff;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-25")
public class HtmlDiffService {

  public interface Iface {

    public void createDiffFile(String pageUrl, String pageUrl2, String outputfileName) throws TException;

  }

  public interface AsyncIface {

    public void createDiffFile(String pageUrl, String pageUrl2, String outputfileName, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void createDiffFile(String pageUrl, String pageUrl2, String outputfileName) throws TException
    {
      send_createDiffFile(pageUrl, pageUrl2, outputfileName);
      recv_createDiffFile();
    }

    public void send_createDiffFile(String pageUrl, String pageUrl2, String outputfileName) throws TException
    {
      createDiffFile_args args = new createDiffFile_args();
      args.setPageUrl(pageUrl);
      args.setPageUrl2(pageUrl2);
      args.setOutputfileName(outputfileName);
      sendBase("createDiffFile", args);
    }

    public void recv_createDiffFile() throws TException
    {
      createDiffFile_result result = new createDiffFile_result();
      receiveBase(result, "createDiffFile");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createDiffFile(String pageUrl, String pageUrl2, String outputfileName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      createDiffFile_call method_call = new createDiffFile_call(pageUrl, pageUrl2, outputfileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createDiffFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pageUrl;
      private String pageUrl2;
      private String outputfileName;
      public createDiffFile_call(String pageUrl, String pageUrl2, String outputfileName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageUrl = pageUrl;
        this.pageUrl2 = pageUrl2;
        this.outputfileName = outputfileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createDiffFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createDiffFile_args args = new createDiffFile_args();
        args.setPageUrl(pageUrl);
        args.setPageUrl2(pageUrl2);
        args.setOutputfileName(outputfileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createDiffFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createDiffFile", new createDiffFile());
      return processMap;
    }

    public static class createDiffFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createDiffFile_args> {
      public createDiffFile() {
        super("createDiffFile");
      }

      public createDiffFile_args getEmptyArgsInstance() {
        return new createDiffFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createDiffFile_result getResult(I iface, createDiffFile_args args) throws TException {
        createDiffFile_result result = new createDiffFile_result();
        iface.createDiffFile(args.pageUrl, args.pageUrl2, args.outputfileName);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createDiffFile", new createDiffFile());
      return processMap;
    }

    public static class createDiffFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createDiffFile_args, Void> {
      public createDiffFile() {
        super("createDiffFile");
      }

      public createDiffFile_args getEmptyArgsInstance() {
        return new createDiffFile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            createDiffFile_result result = new createDiffFile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createDiffFile_result result = new createDiffFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createDiffFile_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.createDiffFile(args.pageUrl, args.pageUrl2, args.outputfileName,resultHandler);
      }
    }

  }

  public static class createDiffFile_args implements org.apache.thrift.TBase<createDiffFile_args, createDiffFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<createDiffFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createDiffFile_args");

    private static final org.apache.thrift.protocol.TField PAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pageUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_URL2_FIELD_DESC = new org.apache.thrift.protocol.TField("pageUrl2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUTPUTFILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outputfileName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createDiffFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createDiffFile_argsTupleSchemeFactory());
    }

    public String pageUrl; // required
    public String pageUrl2; // required
    public String outputfileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_URL((short)1, "pageUrl"),
      PAGE_URL2((short)2, "pageUrl2"),
      OUTPUTFILE_NAME((short)3, "outputfileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_URL
            return PAGE_URL;
          case 2: // PAGE_URL2
            return PAGE_URL2;
          case 3: // OUTPUTFILE_NAME
            return OUTPUTFILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("pageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_URL2, new org.apache.thrift.meta_data.FieldMetaData("pageUrl2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUTFILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("outputfileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDiffFile_args.class, metaDataMap);
    }

    public createDiffFile_args() {
    }

    public createDiffFile_args(
      String pageUrl,
      String pageUrl2,
      String outputfileName)
    {
      this();
      this.pageUrl = pageUrl;
      this.pageUrl2 = pageUrl2;
      this.outputfileName = outputfileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createDiffFile_args(createDiffFile_args other) {
      if (other.isSetPageUrl()) {
        this.pageUrl = other.pageUrl;
      }
      if (other.isSetPageUrl2()) {
        this.pageUrl2 = other.pageUrl2;
      }
      if (other.isSetOutputfileName()) {
        this.outputfileName = other.outputfileName;
      }
    }

    public createDiffFile_args deepCopy() {
      return new createDiffFile_args(this);
    }

    @Override
    public void clear() {
      this.pageUrl = null;
      this.pageUrl2 = null;
      this.outputfileName = null;
    }

    public String getPageUrl() {
      return this.pageUrl;
    }

    public createDiffFile_args setPageUrl(String pageUrl) {
      this.pageUrl = pageUrl;
      return this;
    }

    public void unsetPageUrl() {
      this.pageUrl = null;
    }

    /** Returns true if field pageUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetPageUrl() {
      return this.pageUrl != null;
    }

    public void setPageUrlIsSet(boolean value) {
      if (!value) {
        this.pageUrl = null;
      }
    }

    public String getPageUrl2() {
      return this.pageUrl2;
    }

    public createDiffFile_args setPageUrl2(String pageUrl2) {
      this.pageUrl2 = pageUrl2;
      return this;
    }

    public void unsetPageUrl2() {
      this.pageUrl2 = null;
    }

    /** Returns true if field pageUrl2 is set (has been assigned a value) and false otherwise */
    public boolean isSetPageUrl2() {
      return this.pageUrl2 != null;
    }

    public void setPageUrl2IsSet(boolean value) {
      if (!value) {
        this.pageUrl2 = null;
      }
    }

    public String getOutputfileName() {
      return this.outputfileName;
    }

    public createDiffFile_args setOutputfileName(String outputfileName) {
      this.outputfileName = outputfileName;
      return this;
    }

    public void unsetOutputfileName() {
      this.outputfileName = null;
    }

    /** Returns true if field outputfileName is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputfileName() {
      return this.outputfileName != null;
    }

    public void setOutputfileNameIsSet(boolean value) {
      if (!value) {
        this.outputfileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_URL:
        if (value == null) {
          unsetPageUrl();
        } else {
          setPageUrl((String)value);
        }
        break;

      case PAGE_URL2:
        if (value == null) {
          unsetPageUrl2();
        } else {
          setPageUrl2((String)value);
        }
        break;

      case OUTPUTFILE_NAME:
        if (value == null) {
          unsetOutputfileName();
        } else {
          setOutputfileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_URL:
        return getPageUrl();

      case PAGE_URL2:
        return getPageUrl2();

      case OUTPUTFILE_NAME:
        return getOutputfileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_URL:
        return isSetPageUrl();
      case PAGE_URL2:
        return isSetPageUrl2();
      case OUTPUTFILE_NAME:
        return isSetOutputfileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createDiffFile_args)
        return this.equals((createDiffFile_args)that);
      return false;
    }

    public boolean equals(createDiffFile_args that) {
      if (that == null)
        return false;

      boolean this_present_pageUrl = true && this.isSetPageUrl();
      boolean that_present_pageUrl = true && that.isSetPageUrl();
      if (this_present_pageUrl || that_present_pageUrl) {
        if (!(this_present_pageUrl && that_present_pageUrl))
          return false;
        if (!this.pageUrl.equals(that.pageUrl))
          return false;
      }

      boolean this_present_pageUrl2 = true && this.isSetPageUrl2();
      boolean that_present_pageUrl2 = true && that.isSetPageUrl2();
      if (this_present_pageUrl2 || that_present_pageUrl2) {
        if (!(this_present_pageUrl2 && that_present_pageUrl2))
          return false;
        if (!this.pageUrl2.equals(that.pageUrl2))
          return false;
      }

      boolean this_present_outputfileName = true && this.isSetOutputfileName();
      boolean that_present_outputfileName = true && that.isSetOutputfileName();
      if (this_present_outputfileName || that_present_outputfileName) {
        if (!(this_present_outputfileName && that_present_outputfileName))
          return false;
        if (!this.outputfileName.equals(that.outputfileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageUrl = true && (isSetPageUrl());
      list.add(present_pageUrl);
      if (present_pageUrl)
        list.add(pageUrl);

      boolean present_pageUrl2 = true && (isSetPageUrl2());
      list.add(present_pageUrl2);
      if (present_pageUrl2)
        list.add(pageUrl2);

      boolean present_outputfileName = true && (isSetOutputfileName());
      list.add(present_outputfileName);
      if (present_outputfileName)
        list.add(outputfileName);

      return list.hashCode();
    }

    @Override
    public int compareTo(createDiffFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageUrl()).compareTo(other.isSetPageUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageUrl, other.pageUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageUrl2()).compareTo(other.isSetPageUrl2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageUrl2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageUrl2, other.pageUrl2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputfileName()).compareTo(other.isSetOutputfileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputfileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputfileName, other.outputfileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createDiffFile_args(");
      boolean first = true;

      sb.append("pageUrl:");
      if (this.pageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.pageUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageUrl2:");
      if (this.pageUrl2 == null) {
        sb.append("null");
      } else {
        sb.append(this.pageUrl2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputfileName:");
      if (this.outputfileName == null) {
        sb.append("null");
      } else {
        sb.append(this.outputfileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createDiffFile_argsStandardSchemeFactory implements SchemeFactory {
      public createDiffFile_argsStandardScheme getScheme() {
        return new createDiffFile_argsStandardScheme();
      }
    }

    private static class createDiffFile_argsStandardScheme extends StandardScheme<createDiffFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createDiffFile_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pageUrl = iprot.readString();
                struct.setPageUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_URL2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pageUrl2 = iprot.readString();
                struct.setPageUrl2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTPUTFILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputfileName = iprot.readString();
                struct.setOutputfileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createDiffFile_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageUrl != null) {
          oprot.writeFieldBegin(PAGE_URL_FIELD_DESC);
          oprot.writeString(struct.pageUrl);
          oprot.writeFieldEnd();
        }
        if (struct.pageUrl2 != null) {
          oprot.writeFieldBegin(PAGE_URL2_FIELD_DESC);
          oprot.writeString(struct.pageUrl2);
          oprot.writeFieldEnd();
        }
        if (struct.outputfileName != null) {
          oprot.writeFieldBegin(OUTPUTFILE_NAME_FIELD_DESC);
          oprot.writeString(struct.outputfileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createDiffFile_argsTupleSchemeFactory implements SchemeFactory {
      public createDiffFile_argsTupleScheme getScheme() {
        return new createDiffFile_argsTupleScheme();
      }
    }

    private static class createDiffFile_argsTupleScheme extends TupleScheme<createDiffFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createDiffFile_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageUrl()) {
          optionals.set(0);
        }
        if (struct.isSetPageUrl2()) {
          optionals.set(1);
        }
        if (struct.isSetOutputfileName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPageUrl()) {
          oprot.writeString(struct.pageUrl);
        }
        if (struct.isSetPageUrl2()) {
          oprot.writeString(struct.pageUrl2);
        }
        if (struct.isSetOutputfileName()) {
          oprot.writeString(struct.outputfileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createDiffFile_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pageUrl = iprot.readString();
          struct.setPageUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageUrl2 = iprot.readString();
          struct.setPageUrl2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.outputfileName = iprot.readString();
          struct.setOutputfileNameIsSet(true);
        }
      }
    }

  }

  public static class createDiffFile_result implements org.apache.thrift.TBase<createDiffFile_result, createDiffFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<createDiffFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createDiffFile_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createDiffFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createDiffFile_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDiffFile_result.class, metaDataMap);
    }

    public createDiffFile_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createDiffFile_result(createDiffFile_result other) {
    }

    public createDiffFile_result deepCopy() {
      return new createDiffFile_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createDiffFile_result)
        return this.equals((createDiffFile_result)that);
      return false;
    }

    public boolean equals(createDiffFile_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(createDiffFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createDiffFile_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createDiffFile_resultStandardSchemeFactory implements SchemeFactory {
      public createDiffFile_resultStandardScheme getScheme() {
        return new createDiffFile_resultStandardScheme();
      }
    }

    private static class createDiffFile_resultStandardScheme extends StandardScheme<createDiffFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createDiffFile_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createDiffFile_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createDiffFile_resultTupleSchemeFactory implements SchemeFactory {
      public createDiffFile_resultTupleScheme getScheme() {
        return new createDiffFile_resultTupleScheme();
      }
    }

    private static class createDiffFile_resultTupleScheme extends TupleScheme<createDiffFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createDiffFile_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createDiffFile_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
